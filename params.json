{"name":"Backbone.IO","body":"Backbone.IO provides a backend-agnostic Backbone.js sync override and server notifications via Socket.IO.\r\n\r\nInstall\r\n-------\r\n\r\n    npm install backbone.io\r\n    \r\nUsage\r\n-----\r\n\r\nOn the server:\r\n\r\n```javascript\r\nvar http = require('http');\r\nvar backboneio = require('backbone.io');\r\n\r\nvar app = http.createServer();    \r\napp.listen(3000);\r\n\r\nvar backend = backboneio.createBackend();\r\nbackend.use(backboneio.middleware.memoryStore());\r\n\r\nbackboneio.listen(app, { mybackend: backend });\r\n```\r\n\r\nOn the client:\r\n\r\n```html\r\n<!-- Include Underscore, Backbone -->\r\n\r\n<script src=\"/socket.io/socket.io.js\"></script>\r\n<script src=\"/socket.io/backbone.io.js\"></script>\r\n\r\n<script>\r\n    var MyCollection = Backbone.Collection.extend({\r\n        backend: 'mybackend'\r\n    });\r\n</script>\r\n```\r\n    \r\nModels in `MyCollection` will now be synced to `mybackend`.\r\n\r\nEvents\r\n------\r\n\r\nWhen a model is synced with a particular backend, the backend will trigger events\r\non collections (across multiple clients) that share the backend.  For example, we\r\ncould keep collections synced in realtime with the following event bindings:\r\n\r\n```javascript\r\nvar MyCollection = Backbone.Collection.extend({\r\n    \r\n    backend: 'mybackend',\r\n    \r\n    initialize: function() {\r\n        var self = this;\r\n    \r\n        this.bind('backend:create', function(model) {\r\n            self.add(model);\r\n        });\r\n        this.bind('backend:update', function(model) {\r\n            self.get(model.id).set(model);\r\n        });\r\n        this.bind('backend:delete', function(model) {\r\n            self.remove(model.id);\r\n        });\r\n    }\r\n    \r\n});\r\n```\r\n    \r\nOr use the provided shortcut:\r\n\r\n```javascript    \r\nbackend: 'mybackend',\r\n\r\ninitialize: function() {\r\n    this.bindBackend();\r\n}\r\n```\r\n    \r\nIn addition to `backend:create`, `backend:read`, `backend:update`, and `backend:delete`\r\nevents, a generic `backend` event is also triggered when a model is synced.\r\n\r\n```javascript\r\nthis.bind('backend', function(method, model) {\r\n    // Method will be one of create, read, update, or delete\r\n});\r\n```\r\n    \r\nThe event prefix `backend` is used by default but this can be customized by setting the\r\nevent name on the server.\r\n\r\n```javascript\r\nbackboneio.listen(app, { mybackend: backend }, { event: 'myevent' });\r\n```\r\n\r\nBackends and Middleware\r\n-----------------------\r\n\r\nBackends are stacks of composable middleware (inspired by Connect) that are responsible\r\nfor handling sync requests and responding appropriately.  Each middleware is a function\r\nthat accepts request and response objects (and optionally a function that can be called\r\nto continue down the stack).  A middleware will generally either return a result by\r\ncalling `end` on the response object or pass control downward.  For example, let's add a\r\nlogger middleware to our backend:\r\n\r\n```javascript\r\nvar backend = backboneio.createBackend();\r\n\r\nbackend.use(function(req, res, next) {\r\n    console.log(req.backend);\r\n    console.log(req.method);\r\n    console.log(JSON.stringify(req.model));\r\n    next();\r\n});\r\n\r\nbackend.use(backboneio.middleware.memoryStore());\r\n```\r\n    \r\nA request object will contain the following components (in addition to those set by\r\nvarious middleware):\r\n\r\n* `method`: the sync method (`create`, `read`, `update`, or `delete`)\r\n* `model`: the model object to by synced\r\n* `options`: any options set by the client (except success and error callbacks)\r\n* `backend`: name of the backend responsible for handling the request\r\n* `socket`: the client socket that initiated the request\r\n    \r\nMiddleware can also be applied to only particular types of requests by passing the desired\r\ncontexts to `use`:\r\n\r\n```javascript\r\nbackend.use('create', 'update', 'delete', function(req, res, next) {\r\n    if (isAuthorized(req)) {\r\n        next();\r\n    } else {\r\n        next(new Error('Unauthorized'));\r\n    }\r\n});\r\n```\r\n    \r\nOr alternatively by using one of the four helper methods (`create`, `read`, `update`, `delete`):\r\n\r\n```javascript\r\nbackend.read(function(req, res) {\r\n    if (req.model.id) {\r\n        req.end(mymodels[req.model.id]);\r\n    } else {\r\n        req.end(mymodels);\r\n    }\r\n});\r\n```\r\n    \r\nIf the bottom of the middleware stack is reached before a result is returned then the requested\r\nmodel is returned by default: `res.end(req.model)`.  Look in the `middleware` directory for more\r\nexamples.\r\n\r\nClients are automatically notified of events triggered by other clients, however, there may\r\nbe cases where other server-side code needs to make updates to a model outside of a backend\r\nhandler.  In such a case, one can notify clients by emitting events directly on the backend.\r\nFor example:\r\n\r\n```javascript\r\nvar backend = backboneio.createBackend();\r\nbackend.use(backboneio.middleware.memoryStore());\r\n\r\n// Clients will receive 'backend:create', 'backend:update',\r\n// and 'backend:delete' events respectively.\r\nbackend.emit('created', { id: 'myid', foo: 'bar' });\r\nbackend.emit('updated', { id: 'myid', foo: 'baz' });\r\nbackend.emit('deleted', { id: 'myid' });\r\n```\r\n\r\nChannels\r\n--------\r\n\r\nTo synchronize models between a subset of all clients sharing a single backend, you can\r\nspecify a channel.\r\n\r\n```javascript\r\nvar MyCollection = Backbone.Collection.extend({\r\n    \r\n    backend: { name: 'mybackend', channel: 'mychannel' }\r\n    \r\n});\r\n```\r\n\r\nOnly clients sharing the same channel will receive updates from each other.  The channel\r\nassociated with a given request is available from any middleware in `req.channel`.\r\n    \r\nCustomizing\r\n-----------\r\n\r\nIn addition to middleware, the behavior of Backbone.IO can be customized via standard Socket.IO\r\nmechanisms.  The object returned from the call to `listen` is the Socket.IO object and can be\r\nmanipulated further.  See http://socket.io for more details.","tagline":"Backbone.js sync via Socket.IO","google":"UA-30677351-1","note":"Don't delete this file! It's used internally to help with page regeneration."}